const express = require("express");
const passport = require("passport");
const crypto = require("crypto");

const router = express.Router();

// Replace these constants with the correct values for your Charts instance
const CHARTS_EMBEDDING_BASE_URL =
  "https://charts.mongodb.com/charts-project-0-kbtqz"; // Replace with the base URL to your Charts instance, e.g. https://charts.mongodb.com/charts-foo-abcde (no trailing slash)
const CHARTS_TENANT_ID = "972ba80c-e14b-40ec-9438-dc0d3ca7c6b6"; // Replace with your Charts Tenant ID from the Embed Chart snippet
const EMBEDDING_SIGNING_KEY = "ed112756b724410a"; // Replace with the Embedding Signing Key generated by your Charts admin
const EXPIRY_TIME_SECONDS = 86400; // Set to your preferred expiry period
// const FILTER_DOCUMENT = { username: "Nasa" }; // Set to a MongoDB Query document if you want to filter the chart, e.g. { foo: { $gt: 10 }}
const AUTOREFRESH_TIME_SECONDS = 60; // Set to a number >=10 if you want the chart to autorefresh

router.post(
  "/like_chart/embeddedchart",
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    let username1 = req.body.username;
    let chartId = req.body.like_chartId;
    // console.log("printing username1", username1);
    const FILTER_DOCUMENT = { username: username1 };
    const timestamp = Math.floor(Date.now() / 1000);
    let payload = `id=${chartId}&tenant=${CHARTS_TENANT_ID}&timestamp=${timestamp}&expires-in=${EXPIRY_TIME_SECONDS}`;
    if (FILTER_DOCUMENT) {
      payload += `&filter=${encodeURIComponent(
        JSON.stringify(FILTER_DOCUMENT)
      )}`;
    }
    if (AUTOREFRESH_TIME_SECONDS) {
      payload += `&autorefresh=${AUTOREFRESH_TIME_SECONDS}`;
    }
    const hmac = crypto.createHmac("sha256", EMBEDDING_SIGNING_KEY);
    hmac.update(payload);
    const signature = hmac.digest("hex");
    // generate url for iframe
    const url = `${CHARTS_EMBEDDING_BASE_URL}/embed/charts?${payload}&signature=${signature}`;
    // console.log("printing url", url);
    res.send(url);
  }
);

router.post(
  "/view_chart/embeddedchart",
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    let username1 = req.body.username;
    let chartId = req.body.view_chartId;
    // console.log("printing username1", username1);
    const FILTER_DOCUMENT = { username: username1 };
    const timestamp = Math.floor(Date.now() / 1000);
    let payload = `id=${chartId}&tenant=${CHARTS_TENANT_ID}&timestamp=${timestamp}&expires-in=${EXPIRY_TIME_SECONDS}`;
    if (FILTER_DOCUMENT) {
      payload += `&filter=${encodeURIComponent(
        JSON.stringify(FILTER_DOCUMENT)
      )}`;
    }
    if (AUTOREFRESH_TIME_SECONDS) {
      payload += `&autorefresh=${AUTOREFRESH_TIME_SECONDS}`;
    }
    const hmac = crypto.createHmac("sha256", EMBEDDING_SIGNING_KEY);
    hmac.update(payload);
    const signature = hmac.digest("hex");
    // generate url for iframe
    const url = `${CHARTS_EMBEDDING_BASE_URL}/embed/charts?${payload}&signature=${signature}`;
    // console.log("printing url", url);
    res.send(url);
  }
);

router.post(
  "/retweet_chart/embeddedchart",
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    let username1 = req.body.username;
    let chartId = req.body.retweet_chartId;
    // console.log("printing username1", username1);
    const FILTER_DOCUMENT = { username: username1 };
    const timestamp = Math.floor(Date.now() / 1000);
    let payload = `id=${chartId}&tenant=${CHARTS_TENANT_ID}&timestamp=${timestamp}&expires-in=${EXPIRY_TIME_SECONDS}`;
    if (FILTER_DOCUMENT) {
      payload += `&filter=${encodeURIComponent(
        JSON.stringify(FILTER_DOCUMENT)
      )}`;
    }
    if (AUTOREFRESH_TIME_SECONDS) {
      payload += `&autorefresh=${AUTOREFRESH_TIME_SECONDS}`;
    }
    const hmac = crypto.createHmac("sha256", EMBEDDING_SIGNING_KEY);
    hmac.update(payload);
    const signature = hmac.digest("hex");
    // generate url for iframe
    const url = `${CHARTS_EMBEDDING_BASE_URL}/embed/charts?${payload}&signature=${signature}`;
    // console.log("printing url", url);
    res.send(url);
  }
);

router.post(
  "/tweets_chart/embeddedchart",
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    let username1 = req.body.username;
    let chartId = req.body.tweets_chartId;
    // console.log("printing username1", username1);
    const FILTER_DOCUMENT = { username: username1 };
    const timestamp = Math.floor(Date.now() / 1000);
    let payload = `id=${chartId}&tenant=${CHARTS_TENANT_ID}&timestamp=${timestamp}&expires-in=${EXPIRY_TIME_SECONDS}`;
    if (FILTER_DOCUMENT) {
      payload += `&filter=${encodeURIComponent(
        JSON.stringify(FILTER_DOCUMENT)
      )}`;
    }
    if (AUTOREFRESH_TIME_SECONDS) {
      payload += `&autorefresh=${AUTOREFRESH_TIME_SECONDS}`;
    }
    const hmac = crypto.createHmac("sha256", EMBEDDING_SIGNING_KEY);
    hmac.update(payload);
    const signature = hmac.digest("hex");
    // generate url for iframe
    const url = `${CHARTS_EMBEDDING_BASE_URL}/embed/charts?${payload}&signature=${signature}`;
    // console.log("printing url", url);
    res.send(url);
  }
);

module.exports = router;
